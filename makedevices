#!/usr/local/bin/python3
# 
# ElectrOne - make Devices.py
#
# Ableton Live MIDI Remote Script for the Electra One
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE

from pathlib import Path

PREAMBLE = """
# ElectrOne - Device definitions
#
# Ableton Live MIDI Remote Script for the Electra One
#
# Author: Jaap-henk Hoepman (info@xot.nl)
#
# Distributed under the MIT License, see LICENSE
#

# Dictionary with preset and MIDI cc mapping data for known devices
# (indexed by device.original_name)
# - The preset is a JSON string in Electra One format.
#   (The current implementation assumes that all quantized parameters
#   are 7-bit absolute CC values while all non quantized parameters are
#   14-bit absolute values)
# - The MIDI cc mapping data is a dictionary of Ableton Live original parameter
#   names with their corresponding MIDI CC values in the preset.
#

from .ElectraOneDumper import PatchInfo
"""

POSTSCRIPT = """
# Return the predefined patch information for a device, None if it doesn't exist
def get_predefined_patch_info(device_original_name):
    # FIXME: try to read from file
    if device_original_name in DEVICES:
        return DEVICES[device_original_name]
    else:
        return None
"""

DEVICES = 'Devices.py'

here = Path('.')
allpresets = here.glob('preloaded/*.epr')
with open(DEVICES,'w') as outf:
    outf.write(PREAMBLE)
    outf.write('\nDEVICES = {\n')
    flag = False
    for preset in allpresets:
        if flag:
            outf.write(',')
        flag = True
        json_patch_path = preset
        with open(json_patch_path,'r') as inf:
            json_patch = inf.read()
        ccmap_path = preset.with_suffix('.ccmap')
        with open(ccmap_path,'r') as inf:
            ccmap = inf.read()
        device = preset.stem
        outf.write(f"'{ device }': PatchInfo('")
        outf.write(json_patch)
        outf.write("'\n  ,")
        outf.write(ccmap)
        outf.write(')\n')
    outf.write('}\n\n')
    outf.write(POSTSCRIPT)
